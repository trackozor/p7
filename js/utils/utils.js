/* =============================================================================*/
/* üéØ PROJET      : Fisheye */
/* üìÑ FICHIER     : utils.js */
/* üñäÔ∏è AUTEUR      : Trackozor */
/* üìÜ DATE        : 21/01/2025 */
/* üîÑ VERSION     : 1.2.0 */
/* üìù DESCRIPTION : Fonctions utilitaires globales du projet Fisheye :     */
/*   - Gestion et v√©rification des logs.                                    */
/*   - Manipulation s√©curis√©e des classes CSS.                               */
/*   - D√©tection de la page actuelle.                                        */
/*   - Gestion des erreurs des formulaires.                                  */
/* ============================================================================= */


/* =============================================================================*/
/* SECTION : IMPORTATIONS (Imports des constantes globales) */
/* =============================================================================*/

import {
  CONFIGLOG,        // Configuration des logs (niveaux de logs, couleurs, ic√¥nes...)
  ENVIRONMENTS,     // Liste des environnements (D√©veloppement, Production...)
  ACTIVE_ENVIRONMENT // Environnement actif du projet
} from "../config/constants.js";


/* ============================================================================= */
/* SECTION : FONCTIONS DE LOG                                                    */
/* ============================================================================= */

/**
 * V√©rifie si un niveau de log est activ√© en fonction de la verbosit√©, du niveau de log configur√©,
 * et de l'environnement actif.
 *
 * @param {string} level - Niveau de log √† v√©rifier (ex : "info", "error", etc.).
 * @returns {boolean} - `true` si le log est autoris√©, sinon `false`.
 */
export const isLogEnabled = (level) => {
  const verbosityMap = {
    low: ["error", "warn"], // Verbosit√© basse : uniquement erreurs et avertissements
    medium: ["error", "warn", "success"], // Verbosit√© moyenne : ajoute les succ√®s
    high: ["error", "warn", "success", "info", "test_start", "test_end"], // Verbosit√© haute : tous les logs
  };

  // R√©cup√©ration des niveaux autoris√©s par la verbosit√©
  const allowedLevels = verbosityMap[CONFIGLOG.VERBOSITY] || [];

  // V√©rifie si le niveau est activ√© dans la configuration
  const isLevelEnabledInConfig = CONFIGLOG.LOG_LEVELS?.[level] ?? false;

  // V√©rifie si le niveau est permis par la verbosit√©
  const isAllowedByVerbosity = allowedLevels.includes(level);

  // Limite certains logs √† l'environnement d√©veloppement
  const isEnvironmentAllowed =
    ACTIVE_ENVIRONMENT === ENVIRONMENTS.DEVELOPMENT ||
    !["info", "test_start", "test_end"].includes(level);

  // La combinaison des trois crit√®res d√©termine si le log est activ√©
  return isLevelEnabledInConfig && isAllowedByVerbosity && isEnvironmentAllowed;
};

/**
 * Logue des √©v√©nements dans la console avec horodatage, ic√¥nes et styles.
 * @param {string} type - Type de log (info, warn, error, etc.).
 * @param {string} message - Message √† afficher.
 * @param {Object} [data={}] - Donn√©es suppl√©mentaires pour le contexte.
 */
export const logEvent = (type, message, data = {}) => {
  if (!type || typeof type !== "string") {
    console.error("logEvent : Type de log invalide ou non d√©fini.", { type });
    return;
  }

  const timestamp = new Date().toLocaleTimeString();
  const prefix = `[Les-petits-plats][${timestamp}]`;
  const icon =
    CONFIGLOG.LOG_ICONS?.[type] || CONFIGLOG.LOG_ICONS?.default || "üîµ";
  const style =
    CONFIGLOG.LOG_STYLES?.[type] ||
    CONFIGLOG.LOG_STYLES?.default ||
    "color: black;";
  const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`;

  try {
    if (console[type] && typeof console[type] === "function") {
      console[type](`%c${fullMessage}`, style, data);
    } else {
      console.log(`%c${fullMessage}`, style, data);
    }
  } catch (error) {
    console.error(
      "%cErreur dans logEvent :",
      CONFIGLOG.LOG_STYLES?.error || "color: red;",
      error,
    );
  }
};

/* ============================================================================= */
/*  SECTION : MANIPULATION DES CLASSES CSS   */
/* ============================================================================= */

/**
 * Ajoute une classe CSS √† un √©l√©ment HTML.
 * @param {HTMLElement} element - √âl√©ment cible.
 * @param {string} className - Classe CSS √† ajouter.
 * @returns {boolean} `true` si la classe est ajout√©e, `false` sinon.
 */
export function addClass(element, className) {
  if (!(element instanceof HTMLElement)) {
    logEvent("error", "addClass: √âl√©ment HTML invalide.", { element });
    return false;
  }

  if (typeof className !== "string" || className.trim() === "") {
    logEvent("error", "addClass: Nom de classe invalide.", { className });
    return false;
  }

  if (element.classList.contains(className)) {
    logEvent("info", `addClass: Classe "${className}" d√©j√† pr√©sente.`, {
      element,
    });
    return false;
  }

  try {
    element.classList.add(className);
    logEvent("success", `addClass: Classe "${className}" ajout√©e.`, {
      element,
    });
    return true;
  } catch (error) {
    logEvent("error", "addClass: Erreur lors de l'ajout de la classe.", {
      error,
    });
    return false;
  }
}


/* ============================================================================= */
/**
 * Supprime une classe CSS d'un √©l√©ment HTML.
 * @param {HTMLElement} element - √âl√©ment cible.
 * @param {string} className - Classe CSS √† supprimer.
 * @returns {boolean} `true` si la classe est supprim√©e, `false` sinon.
 */
export function removeClass(element, className) {
  if (!(element instanceof HTMLElement)) {
    logEvent("error", "removeClass: √âl√©ment HTML invalide.", { element });
    return false;
  }

  if (typeof className !== "string" || className.trim() === "") {
    logEvent("error", "removeClass: Nom de classe invalide.", { className });
    return false;
  }

  if (!element.classList.contains(className)) {
    logEvent("info", `removeClass: Classe "${className}" non pr√©sente.`, {
      element,
    });
    return false;
  }

  try {
    element.classList.remove(className);
    logEvent("success", `removeClass: Classe "${className}" supprim√©e.`, {
      element,
    });
    return true;
  } catch (error) {
    logEvent(
      "error",
      "removeClass: Erreur lors de la suppression de la classe.",
      { error },
    );
    return false;
  }
}

/* ============================================================================= */
/* SECTION : FONCTIONS DOM */
/* ============================================================================= */
/**
 * D√©tecte la page actuelle en combinant plusieurs m√©thodes :
 * - Attribut HTML `data-page` (pr√©f√©r√© si disponible).
 * - Analyse de l'URL (path ou query string).
 * - Valeur par d√©faut si aucun cas ne correspond.
 *
 * @returns {string} Nom de la page actuelle ("index", "photographer", ou "unknown").
 */

export const getCurrentPage = () => {
  const bodyPage = document.body.getAttribute("data-page");
  if (bodyPage) {
    logEvent("info", "Page d√©tect√©e via data-page", { page: bodyPage });
    return bodyPage;
  }

  const path = window.location.pathname;
  logEvent("info", "Path d√©tect√©", { path });

  if (path === "/" || path.endsWith("/") || path.includes("index.html")) {
    logEvent("info", "Page d√©tect√©e via pathname", { page: "index" });
    return "index";
  }
  if (path.includes("photographer.html")) {
    logEvent("info", "Page d√©tect√©e via pathname", { page: "photographer" });
    return "photographer";
  }

  logEvent("warn", "Page inconnue, aucun s√©lecteur sp√©cifique charg√©.", {
    path,
  });
  return "unknown";
};

/*================================================================================================================================================*/
/*===============================================================================================*/
/*                                 ======= Messages erreurs =======                              */
/*===============================================================================================*/

/* ============ Fonction pour afficher un message d'erreur et ajouter une bordure rouge ============*/

/**
 * Affiche un message d'erreur et applique une bordure rouge au champ cible.
 *
 * @param {string} message - Message d'erreur √† afficher.
 * @param {HTMLElement} inputElement - Champ d'entr√©e associ√© √† l'erreur.
 */
export function showError(message, inputElement) {
  try {
    // === Validation des param√®tres ===
    if (!message || !(inputElement instanceof HTMLElement)) {
      logEvent("error", "Param√®tres invalides dans showError.", {
        message,
        inputElement,
      });
      return;
    }

    // === Log : D√©but de l'affichage de l'erreur ===
    logEvent("info", "Affichage d'une erreur.", {
      field: inputElement.id || "non d√©fini",
      message,
    });

    // === Suppression des erreurs existantes (pour √©viter les doublons) ===
    removeError(inputElement);

    // === Cr√©ation et ajout du message d'erreur ===
    const errorTooltip = document.createElement("div");
    errorTooltip.classList.add("error-modal"); // Classe CSS pour styliser le message d'erreur
    errorTooltip.textContent = message; // Ajout du texte d'erreur

    // Applique une bordure rouge au champ d'entr√©e
    inputElement.classList.add("error-input");

    // Ajoute le message d'erreur en tant qu'enfant de l'√©l√©ment parent
    const { parentElement } = inputElement;
    if (parentElement) {
      parentElement.appendChild(errorTooltip);
    } else {
      logEvent("error", "Impossible de trouver l'√©l√©ment parent.", {
        field: inputElement.id || "non d√©fini",
      });
    }

    // === Log : Succ√®s de l'ajout ===
    logEvent("success", "Message d'erreur ajout√©.", {
      field: inputElement.id || "non d√©fini",
      message,
    });
  } catch (error) {
    // === Gestion des erreurs ===
    logEvent("error", "Erreur dans showError.", { error: error.message });
  }
}

/* ============ Fonction pour supprimer un message d'erreur et retirer la bordure rouge ============ */
/**
 * Supprime un message d'erreur et retire la bordure rouge du champ cible.
 *
 * @param {HTMLElement} inputElement - Champ d'entr√©e associ√© √† l'erreur.
 */
export function removeError(inputElement) {
  try {
    // === Validation du param√®tre ===
    if (!(inputElement instanceof HTMLElement)) {
      logEvent("error", "Param√®tre invalide dans removeError.", {
        inputElement,
      });
      return;
    }

    // === Suppression du message d'erreur ===
    const { parentElement } = inputElement;
    if (parentElement) {
      const errorTooltip = parentElement.querySelector(".error-modal");
      if (errorTooltip) {
        errorTooltip.remove(); // Supprime l'√©l√©ment du DOM
        logEvent("success", "Message d'erreur supprim√©.", {
          field: inputElement.id || "non d√©fini",
        });
      }
    } else {
      logEvent("error", "Impossible de trouver l'√©l√©ment parent.", {
        field: inputElement.id || "non d√©fini",
      });
    }

    // === Suppression de la classe de bordure rouge ===
    inputElement.classList.remove("error-input");

    // === Log : Succ√®s de la suppression ===
    logEvent("success", "Erreur visuelle supprim√©e.", {
      field: inputElement.id || "non d√©fini",
    });
  } catch (error) {
    // === Gestion des erreurs ===
    logEvent("error", "Erreur dans removeError.", { error: error.message });
  }
}
