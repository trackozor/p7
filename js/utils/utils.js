/* =============================================================================
/* PROJET      : Les Petits Plats
/* FICHIER     : utils.js
/* AUTEUR      : Trackozor
/* DATE        : 21/01/2025
/* VERSION     : 1.2.0
/* DESCRIPTION : Fonctions utilitaires globales du projet.
/*               - Gestion et v√©rification des logs.
/*               - Manipulation s√©curis√©e des classes CSS.
/*               - D√©tection de la page actuelle.
/*               - Gestion des erreurs des formulaires.
/* ============================================================================= */


/* =============================================================================
/* SECTION : IMPORTATIONS (Imports des constantes globales)
/* ============================================================================= */

import {
  CONFIGLOG,        // Configuration des logs (niveaux de logs, couleurs, ic√¥nes...)
  ENVIRONMENTS,     // Liste des environnements (D√©veloppement, Production...)
  ACTIVE_ENVIRONMENT // Environnement actif du projet
} from "../config/constants.js";



/* =============================================================================
/*                 SECTION 1 : FONCTIONS DE LOG
/* ============================================================================= */

/* =============================================================================
/* 1.1 ISLOGENABLED : V√âRIFICATION DE L'ACTIVATION DES LOGS
/* ============================================================================= */

/**
 * V√©rifie si un niveau de log est activ√© selon la configuration du projet.
 *
 * - Prend en compte :
 *   - La configuration des niveaux de log (`CONFIGLOG.LOG_LEVELS`).
 *   - La verbosit√© s√©lectionn√©e (`CONFIGLOG.VERBOSITY`).
 *   - L'environnement actif (`ACTIVE_ENVIRONMENT`).
 * - Restreint certains logs √† l'environnement de d√©veloppement uniquement.
 *
 * @param {string} level - Niveau de log √† v√©rifier (ex : "info", "error", etc.).
 * @returns {boolean} `true` si le log est autoris√©, sinon `false`.
 */
export const isLogEnabled = (level) => {
    // === Validation de l'entr√©e : V√©rifie que `level` est une cha√Æne de caract√®res ===
    if (typeof level !== "string" || level.trim() === "") {
        console.error("isLogEnabled : Niveau de log invalide.", { level });
        return false; // Stoppe la fonction si le niveau est invalide
    }

    // === D√©finition des niveaux de verbosit√© ===
    const verbosityMap = {
        low: ["error", "warn"], // Mode bas : seulement erreurs et avertissements
        medium: ["error", "warn", "success"], // Mode moyen : inclut les succ√®s
        high: ["error", "warn", "success", "info", "test_start", "test_end"], // Mode haut : inclut tous les logs
    };

    // === R√©cup√©ration des niveaux de logs autoris√©s selon la verbosit√© ===
    const allowedLevels = verbosityMap[CONFIGLOG.VERBOSITY] || [];

    // === V√©rifie si le niveau demand√© est activ√© dans la configuration globale ===
    const isLevelEnabledInConfig = CONFIGLOG.LOG_LEVELS?.[level] ?? false;

    // === V√©rifie si le niveau demand√© est inclus dans la verbosit√© active ===
    const isAllowedByVerbosity = allowedLevels.includes(level);

    // === Limitation des logs "info" et "test" aux environnements de d√©veloppement uniquement ===
    const isEnvironmentAllowed =
        ACTIVE_ENVIRONMENT === ENVIRONMENTS.DEVELOPMENT || // Si on est en d√©veloppement, tous les logs sont autoris√©s
        !["info", "test_start", "test_end"].includes(level); // Sinon, ces logs sont bloqu√©s

    // === Retourne `true` uniquement si toutes les conditions sont valid√©es ===
    return isLevelEnabledInConfig && isAllowedByVerbosity && isEnvironmentAllowed;
};


/* =============================================================================
/* 1.2 LOGEVENT : ENREGISTREMENT D'UN √âV√âNEMENT DE LOG
/* ============================================================================= */

/**
 * Enregistre un √©v√©nement de log dans la console avec formatage avanc√©.
 *
 * - G√©n√®re un horodatage pour chaque log.
 * - Applique un style et une ic√¥ne sp√©cifique selon le type de log.
 * - Permet d'ajouter des donn√©es contextuelles pour un meilleur d√©bogage.
 * - G√®re les erreurs pour √©viter un crash en cas de probl√®me.
 *
 * @param {string} type - Type de log (ex: "info", "warn", "error").
 * @param {string} message - Message √† afficher.
 * @param {Object} [data={}] - Donn√©es contextuelles facultatives.
 */
export function logEvent (type, message, data = {}) {
  // === Validation du type de log ===
  if (!type || typeof type !== "string") {
      console.error("logEvent : Type de log invalide ou non d√©fini.", { type });
      return; // Stoppe l'ex√©cution si le type est invalide
  }

  // === G√©n√©ration d'un horodatage format√© ===
  const timestamp = new Date().toLocaleTimeString();

  // === Construction du pr√©fixe standardis√© pour les logs ===
  const prefix = `[Les-Petits-Plats][${timestamp}]`;

  // === S√©lection des ic√¥nes en fonction du type de log ===
  const icon = CONFIGLOG.LOG_ICONS?.[type] || CONFIGLOG.LOG_ICONS?.default || "üîµ";

  // === S√©lection du style CSS pour afficher le log color√© ===
  const style = CONFIGLOG.LOG_STYLES?.[type] || CONFIGLOG.LOG_STYLES?.default || "color: black;";

  // === Construction du message final format√© ===
  const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`;

  try {
      // === V√©rification et affichage du log dans la console ===
      if (console[type] && typeof console[type] === "function") {
          console[type](`%c${fullMessage}`, style, data); // Affichage stylis√©
      } else {
          console.log(`%c${fullMessage}`, style, data); // Affichage par d√©faut si `console[type]` n'existe pas
      }
  } catch (error) {
      // === Gestion des erreurs en cas de probl√®me avec la console ===
      console.error(
          "%cErreur dans logEvent :",
          CONFIGLOG.LOG_STYLES?.error || "color: red;",
          error
      );
  }
};


/* =============================================================================
/*              SECTION 2 : MANIPULATION DES CLASSES CSS
/* ============================================================================= */

/* =============================================================================
/* 2.1 ADDCLASS : AJOUT S√âCURIS√â D'UNE CLASSE CSS √Ä UN √âL√âMENT
/* ============================================================================= */

/**
 * Ajoute une classe CSS √† un √©l√©ment HTML de mani√®re s√©curis√©e.
 *
 * - V√©rifie si `element` est bien un √©l√©ment HTML valide.
 * - V√©rifie si `className` est une cha√Æne de caract√®res valide.
 * - V√©rifie si la classe est d√©j√† pr√©sente avant de l'ajouter.
 * - G√®re les erreurs pour √©viter tout crash.
 *
 * @param {HTMLElement} element - √âl√©ment cible.
 * @param {string} className - Classe CSS √† ajouter.
 * @returns {boolean} `true` si la classe a √©t√© ajout√©e, sinon `false`.
 */
export function addClass(element, className) {
    // === Validation de l'√©l√©ment HTML ===
    if (!(element instanceof HTMLElement)) {
        logEvent("error", "addClass: √âl√©ment HTML invalide.", { element });
        return false; // Retourne `false` si l'√©l√©ment n'est pas valide
    }

    // === Validation du nom de classe ===
    if (typeof className !== "string" || className.trim() === "") {
        logEvent("error", "addClass: Nom de classe invalide.", { className });
        return false; // Retourne `false` si la classe est invalide
    }

    // === V√©rifie si la classe est d√©j√† pr√©sente pour √©viter un ajout inutile ===
    if (element.classList.contains(className)) {
        logEvent("info", `addClass: Classe "${className}" d√©j√† pr√©sente.`, { element });
        return false; // Retourne `false` si la classe est d√©j√† appliqu√©e
    }

    try {
        // === Ajout s√©curis√© de la classe ===
        element.classList.add(className);

        // === Log de confirmation de l'ajout ===
        logEvent("success", `addClass: Classe "${className}" ajout√©e.`, { element });

        return true; // Retourne `true` si l'ajout est r√©ussi
    } catch (error) {
        // === Gestion des erreurs en cas d'√©chec ===
        logEvent("error", "addClass: Erreur lors de l'ajout de la classe.", { error });
        return false; // Retourne `false` en cas d'erreur
    }
}


/* =============================================================================
/* 2.2 REMOVECLASS : SUPPRESSION S√âCURIS√âE D'UNE CLASSE CSS D'UN √âL√âMENT
/* ============================================================================= */

/**
 * Supprime une classe CSS d'un √©l√©ment HTML de mani√®re s√©curis√©e.
 *
 * - V√©rifie si `element` est bien un √©l√©ment HTML valide.
 * - V√©rifie si `className` est une cha√Æne de caract√®res valide.
 * - V√©rifie si la classe est bien pr√©sente avant de la supprimer.
 * - G√®re les erreurs pour √©viter tout crash.
 *
 * @param {HTMLElement} element - √âl√©ment cible.
 * @param {string} className - Classe CSS √† supprimer.
 * @returns {boolean} `true` si la classe a √©t√© supprim√©e, sinon `false`.
 */
export function removeClass(element, className) {
    // === Validation de l'√©l√©ment HTML ===
    if (!(element instanceof HTMLElement)) {
        logEvent("error", "removeClass: √âl√©ment HTML invalide.", { element });
        return false; // Retourne `false` si l'√©l√©ment n'est pas valide
    }

    // === Validation du nom de classe ===
    if (typeof className !== "string" || className.trim() === "") {
        logEvent("error", "removeClass: Nom de classe invalide.", { className });
        return false; // Retourne `false` si la classe est invalide
    }

    // === V√©rifie si la classe est bien pr√©sente pour √©viter une suppression inutile ===
    if (!element.classList.contains(className)) {
        logEvent("info", `removeClass: Classe "${className}" non pr√©sente.`, { element });
        return false; // Retourne `false` si la classe n'est pas appliqu√©e
    }

    try {
        // === Suppression s√©curis√©e de la classe ===
        element.classList.remove(className);

        // === Log de confirmation de la suppression ===
        logEvent("success", `removeClass: Classe "${className}" supprim√©e.`, { element });

        return true; // Retourne `true` si la suppression est r√©ussie
    } catch (error) {
        // === Gestion des erreurs en cas d'√©chec ===
        logEvent("error", "removeClass: Erreur lors de la suppression de la classe.", { error });
        return false; // Retourne `false` en cas d'erreur
    }
}
/**
 * Attend qu'un √©l√©ment sp√©cifique apparaisse dans le DOM.
 * @param {string} selector - Le s√©lecteur CSS de l'√©l√©ment √† attendre.
 * @param {number} timeout - Temps maximal en millisecondes (par d√©faut : 5000ms).
 * @returns {Promise<Element>} - Une promesse qui r√©sout l'√©l√©ment DOM ou rejette si non trouv√©.
 */
export function waitForElement(selector, timeout = 5000) {
    return new Promise((resolve, reject) => {
        const element = document.querySelector(selector);
        if (element) {
            return resolve(element);
        }

        const observer = new MutationObserver(() => {
            const element = document.querySelector(selector);
            if (element) {
                observer.disconnect();
                resolve(element);
            }
        });

        observer.observe(document.body, { childList: true, subtree: true });

        setTimeout(() => {
            observer.disconnect();
            reject(new Error(`waitForElement : L'√©l√©ment "${selector}" n'a pas √©t√© trouv√© dans le DOM apr√®s ${timeout}ms.`));
        }, timeout);
    });
}


