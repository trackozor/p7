/* ==================================================================================== */
/*  FICHIER          : modalManager.js                                                 */
/*  AUTEUR           : Trackozor                                                       */
/*  VERSION          : 1.2                                                             */
/*  DATE DE CR√âATION : 11/02/2025                                                      */
/*  DERNI√àRE MODIF.  : 11/02/2025                                                      */
/*  DESCRIPTION      : Gestion de la modale de mot de passe administrateur.            */
/*                     - Cr√©ation et affichage de la modale.                           */
/*                     - Validation du mot de passe avec callback.                     */
/*                     - Fermeture propre et suppression des √©couteurs.                */
/* ==================================================================================== */

/* ===================================================================
/* 1. Imports
/* ===================================================================*/

import {logEvent} from "./utils.js"
import { attachModalEvents, detachModalEvents } from "../events/eventHandler.js";


/* ===================================================================
/* 2. Cr√©ation Modale
/* ===================================================================*/

/**
 * Cr√©e et affiche une modale de saisie de mot de passe pour l'acc√®s administrateur.
 *
 * - V√©rifie si une modale est d√©j√† ouverte pour √©viter les doublons.
 * - G√©n√®re dynamiquement la structure HTML de la modale et l'ins√®re dans le DOM.
 * - Initialise les √©v√©nements pour la validation et l'annulation de la saisie.
 * - G√®re les erreurs potentielles lors de la cr√©ation et de l'initialisation de la modale.
 *
 * @param {function} callback - Fonction ex√©cut√©e apr√®s validation du mot de passe.
 * @throws {Error} Si le callback est invalide ou non fourni.
 */
/**
 * Cr√©e une modale de mot de passe pour l'acc√®s administrateur.
 * @param {Function} callback - Fonction appel√©e lors de la validation du mot de passe.
 */
/**
 * Cr√©e et affiche une modale de mot de passe pour l'acc√®s administrateur.
 */
export function createPasswordModal() {
    try {
        logEvent("info", "üîÑ createPasswordModal : D√©but de la cr√©ation de la modale...");

        // V√©rifie si la modale existe d√©j√† pour √©viter les doublons
        if (document.getElementById("password-modal")) {
            logEvent("warning", "‚ö†Ô∏è createPasswordModal : Modale de mot de passe d√©j√† existante.");
            return;
        }

        logEvent("info", "‚úÖ createPasswordModal : Cr√©ation d'une nouvelle modale...");

        // Cr√©ation de l'√©l√©ment contenant la modale
        const modal = document.createElement("div");
        modal.id = "password-modal";
        modal.innerHTML = getModalTemplate(); // Ins√®re le contenu HTML de la modale
        document.body.appendChild(modal); // Ajoute la modale au DOM
        modal.classList.add("active"); // Active l'affichage de la modale

        logEvent("success", "üéâ createPasswordModal : Modale ajout√©e au DOM avec succ√®s.");

        // S√©lection des √©l√©ments de la modale
        const passwordInput = modal.querySelector("#admin-password");
        const validateBtn = modal.querySelector(".validate-btn");
        const cancelBtn = modal.querySelector(".cancel-btn");

        logEvent("info", "üîç V√©rification des √©l√©ments HTML de la modale...");

        // V√©rifie que tous les √©l√©ments sont bien pr√©sents
        if (!passwordInput || !validateBtn || !cancelBtn) {
            logEvent("error", "‚ùå createPasswordModal : Un ou plusieurs √©l√©ments de la modale sont introuvables.");
            throw new Error("√âchec de l'initialisation des √©l√©ments de la modale.");
        }

        logEvent("success", "‚úÖ Tous les √©l√©ments de la modale sont pr√©sents.");

        // Place le focus sur le champ de saisie du mot de passe
        passwordInput.focus();
        logEvent("info", "üìù Focus mis sur le champ de saisie du mot de passe.");

        // üîê Validation du mot de passe
        validateBtn.addEventListener("click", () => {
            const enteredPassword = passwordInput.value.trim();
            logEvent("info", `üîë Mot de passe saisi : ${enteredPassword}`);

            if (enteredPassword === "admin123") {  // Change ici pour ton vrai mot de passe
                logEvent("success", "‚úÖ Mot de passe correct, acc√®s autoris√©.");
                alert("Acc√®s autoris√© !");
                closeModal(modal);
            } else {
                logEvent("error", "‚ùå Mot de passe incorrect.");
                alert("Mot de passe incorrect. R√©essayez.");
                passwordInput.value = "";
                passwordInput.focus();
            }
        });

        // ‚ùå Fermeture de la modale en cas d'annulation
        cancelBtn.addEventListener("click", () => {
            logEvent("info", "üö™ Fermeture de la modale via le bouton Annuler.");
            closeModal(modal);
        });

    } catch (error) {
        // Log et gestion de l'erreur
        logEvent("error", "‚ùå createPasswordModal : Erreur lors de la cr√©ation de la modale.", { message: error.message });
        alert("Une erreur est survenue lors de la cr√©ation de la modale. Veuillez r√©essayer.");
    }
}

/**
 * Ferme la modale et la supprime du DOM.
 * @param {HTMLElement} modal - L'√©l√©ment de la modale √† fermer.
 */
function closeModal(modal) {
    if (modal) {
        logEvent("info", "üö™ Suppression de la modale du DOM.");
        modal.classList.remove("active");
        setTimeout(() => modal.remove(), 300); // Supprime la modale apr√®s la transition
    }
}
/**
 * Cr√©e et affiche une modale de mot de passe pour l'acc√®s administrateur.
 */
/**
 * Cr√©e et affiche une modale de mot de passe pour l'acc√®s administrateur.
 */
export function createPasswordModal() {
    try {
        logEvent("info", "üîÑ createPasswordModal : D√©but de la cr√©ation de la modale...");

        // V√©rifie si la modale existe d√©j√† pour √©viter les doublons
        const existingModal = document.getElementById("password-modal");
        if (existingModal) {
            logEvent("warning", "‚ö†Ô∏è Modale de mot de passe d√©tect√©e. Suppression forc√©e avant nouvelle cr√©ation.");
            existingModal.remove(); // Supprime la modale du DOM avant d'en cr√©er une nouvelle
        }

        logEvent("info", "‚úÖ createPasswordModal : Cr√©ation d'une nouvelle modale...");

        // V√©rifie si `getModalTemplate` est bien d√©fini
        if (typeof getModalTemplate !== "function") {
            logEvent("error", "‚ùå createPasswordModal : getModalTemplate() est introuvable ou invalide.");
            throw new Error("Le template de la modale ne peut pas √™tre g√©n√©r√©.");
        }

        // Cr√©ation de l'√©l√©ment contenant la modale
        const modal = document.createElement("div");
        modal.id = "password-modal";
        modal.innerHTML = getModalTemplate(); // Ins√®re le contenu HTML de la modale

        // V√©rifie si la structure HTML g√©n√©r√©e contient bien les √©l√©ments requis
        const passwordInput = modal.querySelector("#admin-password");
        const validateBtn = modal.querySelector(".validate-btn");
        const cancelBtn = modal.querySelector(".cancel-btn");

        if (!passwordInput || !validateBtn || !cancelBtn) {
            logEvent("error", "‚ùå createPasswordModal : Structure HTML incorrecte. V√©rifiez getModalTemplate().");
            throw new Error("La structure de la modale est invalide.");
        }

        // Ajoute la modale au DOM
        document.body.appendChild(modal);
        setTimeout(() => modal.classList.add("active"), 10); // Animation d'apparition fluide
        logEvent("success", "üéâ createPasswordModal : Modale ajout√©e au DOM avec succ√®s.");

        // Place le focus sur le champ de saisie du mot de passe
        passwordInput.focus();
        logEvent("info", "üìù Focus mis sur le champ de saisie du mot de passe.");

        // üîê Validation du mot de passe
        validateBtn.addEventListener("click", () => validatePassword(modal, passwordInput));

        // ‚ùå Fermeture de la modale en cas d'annulation
        cancelBtn.addEventListener("click", () => closeModal(modal));

        // Permet la fermeture avec la touche "√âchap"
        document.addEventListener("keydown", (event) => {
            if (event.key === "Escape") {
                logEvent("info", "üö™ Fermeture de la modale via la touche √âchap.");
                closeModal(modal);
            }
        }, { once: true });

    } catch (error) {
        logEvent("error", "‚ùå createPasswordModal : Erreur lors de la cr√©ation de la modale.", { message: error.message });
        alert("Une erreur est survenue lors de la cr√©ation de la modale. Veuillez r√©essayer.");
    }
}

/**
 * V√©rifie le mot de passe saisi et autorise l'acc√®s si correct.
 * @param {HTMLElement} modal - √âl√©ment de la modale √† fermer si mot de passe valide.
 * @param {HTMLInputElement} passwordInput - Champ de saisie du mot de passe.
 */
function validatePassword(modal, passwordInput) {
    const enteredPassword = passwordInput.value.trim();
    logEvent("info", `üîë Mot de passe saisi : ${enteredPassword}`);

    if (enteredPassword === "admin123") { // Remplace ici par ton vrai mot de passe
        logEvent("success", "‚úÖ Mot de passe correct, acc√®s autoris√©.");
        alert("Acc√®s autoris√© !");
        closeModal(modal);
        enableBenchmarkMode(); // Si n√©cessaire, active le mode admin
    } else {
        logEvent("error", "‚ùå Mot de passe incorrect.");
        alert("Mot de passe incorrect. R√©essayez.");
        passwordInput.value = "";
        passwordInput.focus();
    }
}

/**
 * Ferme la modale et la supprime du DOM avec une transition fluide.
 * @param {HTMLElement} modal - √âl√©ment de la modale √† fermer.
 */
function closeModal(modal) {
    if (modal) {
        logEvent("info", "üö™ Fermeture et suppression de la modale.");
        modal.classList.remove("active");

        setTimeout(() => {
            modal.remove(); // Supprime la modale apr√®s l'animation
        }, 300);
    }
}




/* ================================================================
/* 5. Validation Mot de Passe
/* ================================================================*/

/**  
 * V√©rifie la validit√© du mot de passe administrateur.
 *
 * - V√©rifie si le champ est vide et emp√™che la validation.
 * - Compare le mot de passe avec une valeur s√©curis√©e r√©cup√©r√©e dynamiquement.
 * - Ferme la modale et ex√©cute le `callback` si la validation r√©ussit.
 * - R√©initialise le champ de saisie et affiche un message en cas d'√©chec.
 * - Enregistre les tentatives et erreurs dans un journal d'√©v√©nements.
 *
 * @param {string} password - Mot de passe entr√© par l'utilisateur.
 * @param {function} callback - Fonction ex√©cut√©e apr√®s validation.
 * @param {HTMLElement} modal - Modale √† fermer si l'authentification r√©ussit.
 * @throws {Error} Si le callback ou la modale sont invalides.
 */
export function verifyPassword(password, modal) {
    try {
        // V√©rifie la validit√© des param√®tres
        validateParameters(password, modal);

        // R√©cup√©ration du champ de saisie du mot de passe
        const passwordInput = document.getElementById("admin-password");

        // V√©rifie que le champ de saisie existe bien dans le DOM
        if (!passwordInput) {
            logEvent("error", "verifyPassword : champ de saisie du mot de passe introuvable");
            throw new Error("Le champ de saisie du mot de passe est introuvable.");
        }

        // Nettoie l'entr√©e utilisateur en supprimant les espaces superflus
        const trimmedPassword = password.trim();

        // V√©rifie si le champ est vide et affiche un message d'erreur sans bloquer l'interface
        if (trimmedPassword === "") {
            logEvent("warning", "tentative de validation avec un champ vide");
            displayErrorMessage("Le champ mot de passe ne peut pas √™tre vide.", passwordInput);
            return;
        }

        // R√©cup√©ration s√©curis√©e du mot de passe administrateur
        const storedPassword = getStoredAdminPassword();

        // V√©rification du mot de passe entr√© par l'utilisateur
        if (trimmedPassword === storedPassword) {
            logEvent("success", "Authentification administrateur r√©ussie");

            // Ferme la modale apr√®s validation r√©ussie
            closeModal(modal);

            // Ex√©cute le callback apr√®s validation
            callback(true);

        } else {
            logEvent("warning", "tentative d'acc√®s non autoris√©e");
            displayErrorMessage("Mot de passe incorrect.", passwordInput);
        }

    } catch (error) {
        logEvent("critical", "Erreur critique lors de la v√©rification du mot de passe", { message: error.message });
        throw error;
    }
}

/* ================================================================
/* 6. Validation des Param√®tres de verifyPassword
/* ================================================================*/

/**
 * V√©rifie la validit√© des param√®tres fournis √† `verifyPassword`.
 *
 * - V√©rifie que le mot de passe est une cha√Æne de caract√®res valide.
 * - V√©rifie que le callback est une fonction ex√©cutable.
 * - V√©rifie que la modale est un √©l√©ment HTML valide.
 * - Logue les erreurs d√©tect√©es et l√®ve des exceptions en cas de non-conformit√©.
 *
 * @param {string} password - Mot de passe entr√© par l'utilisateur.
 * @param {function} callback - Fonction ex√©cut√©e apr√®s validation.
 * @param {HTMLElement} modal - Modale √† fermer si l'authentification r√©ussit.
 * @throws {Error} Si l'un des param√®tres est invalide.
 */
function validateParameters(password, callback, modal) {
    try {
        // V√©rification du mot de passe
        if (typeof password !== "string" || password.trim() === "") {
            logEvent("error", "validateParameters : Mot de passe invalide ou vide.");
            throw new Error("Le mot de passe doit √™tre une cha√Æne de caract√®res non vide.");
        }

       
        // V√©rification de la modale
        if (!modal || !(modal instanceof HTMLElement)) {
            logEvent("error", "validateParameters : √âl√©ment modal invalide ou inexistant.");
            throw new Error("L'√©l√©ment modal fourni est invalide ou inexistant.");
        }

    } catch (error) {
        // Log de l'erreur critique et relance de l'exception pour un traitement en amont
        logEvent("critical", "Erreur critique dans validateParameters", { message: error.message });
        throw error;
    }
}

/* ===============================================================
/* 7. Gestion des Messages d'Erreur
/* ================================================================*/

/**
 * Affiche un message d'erreur et r√©initialise le champ de saisie du mot de passe.
 *
 * - Utilise une alerte syst√®me par d√©faut pour afficher le message.
 * - R√©initialise le champ de saisie apr√®s une erreur.
 * - Met le focus sur le champ de saisie pour am√©liorer l'exp√©rience utilisateur.
 * - Permet une alternative UX pour un affichage personnalis√© si n√©cessaire.
 *
 * @param {string} message - Message d'erreur √† afficher.
 * @param {HTMLInputElement} passwordInput - Champ de saisie du mot de passe.
 * @throws {Error} Si les param√®tres sont invalides.
 */
function displayErrorMessage(message, passwordInput) {
    try {
        // V√©rifie que les param√®tres sont valides
        if (typeof message !== "string" || message.trim() === "") {
            logEvent("error", "displayErrorMessage : message d'erreur invalide ou vide.");
            throw new Error("Le message d'erreur doit √™tre une cha√Æne de caract√®res non vide.");
        }

        if (!passwordInput || !(passwordInput instanceof HTMLInputElement)) {
            logEvent("error", "displayErrorMessage : champ de saisie du mot de passe invalide.");
            throw new Error("Le champ de saisie du mot de passe est invalide ou inexistant.");
        }

        // Cr√©e ou met √† jour un √©l√©ment de message d'erreur sous le champ de saisie
        let errorMessage = passwordInput.nextElementSibling;
        if (!errorMessage || !errorMessage.classList.contains("error-message")) {
            errorMessage = document.createElement("p");
            errorMessage.classList.add("error-message");
            passwordInput.parentNode.insertBefore(errorMessage, passwordInput.nextSibling);
        }
        errorMessage.textContent = message;

        // R√©initialisation du champ de saisie apr√®s l'affichage du message
        passwordInput.value = "";

        // Focus sur le champ pour am√©liorer l'exp√©rience utilisateur
        passwordInput.focus();

    } catch (error) {
        logEvent("critical", "Erreur critique dans displayErrorMessage", { message: error.message });
        throw error;
    }
}

// ==========================================================
// 8. Gestion s√©curis√©e du mot de passe administrateur
// ==========================================================

/**
 * R√©cup√®re le mot de passe administrateur s√©curis√©.
 *
 * - √âvite le stockage en dur du mot de passe.
 * - R√©cup√®re le mot de passe √† partir d'un stockage s√©curis√© (ex: API, variable d'environnement).
 * - V√©rifie l'int√©grit√© des donn√©es avant de retourner le mot de passe.
 * - G√®re les erreurs si la r√©cup√©ration du mot de passe √©choue.
 *
 * @returns {string} Le mot de passe s√©curis√© r√©cup√©r√©.
 * @throws {Error} Si le mot de passe n'est pas d√©fini, vide ou ne peut pas √™tre r√©cup√©r√©.
 */
function getStoredAdminPassword() {
    try {
        // R√©cup√©ration du mot de passe s√©curis√© via une API ou une variable d'environnement
        const storedPassword = process.env.ADMIN_PASSWORD?.trim() || null;

        // V√©rifie si le mot de passe est bien r√©cup√©r√© et respecte un minimum de s√©curit√©
        if (!storedPassword || typeof storedPassword !== "string" || storedPassword.length < 12) {
            logEvent("error", "getStoredAdminPassword : Mot de passe administrateur invalide ou trop court.");
            throw new Error("√âchec de r√©cup√©ration du mot de passe s√©curis√©.");
        }

        return storedPassword;

    } catch (error) {
        logEvent("critical", "Erreur critique lors de la r√©cup√©ration du mot de passe s√©curis√©.", { message: error.message });
        throw error;
    }
}


/* =====================================================================
/* 9.Fermeture Modale 
/* ====================================================================
/*
/*   Cette fonction g√®re la fermeture s√©curis√©e de la modale.
/*   Assure un nettoyage complet des √©v√©nements pour √©viter les fuites m√©moire.
/*   Supprime la modale apr√®s un court d√©lai pour g√©rer l'animation.
/*
/*-------------------------------------------------------------------*/

/**
 * Ferme la modale et supprime les √©v√©nements attach√©s.
 *
 * - V√©rifie que l'√©l√©ment `modal` est valide avant de proc√©der.
 * - Retire la classe `active` pour d√©clencher l'animation de fermeture.
 * - Supprime la modale du DOM apr√®s un d√©lai pour laisser l'animation se jouer.
 * - Nettoie les √©v√©nements attach√©s pour √©viter les fuites m√©moire.
 *
 * @param {HTMLElement} modal - √âl√©ment DOM de la modale √† fermer.
 * @throws {Error} Si l'√©l√©ment `modal` est invalide ou inexistant.
 */
export function closeModal(modal) {
    try {
        // V√©rifie que la modale est bien un √©l√©ment HTML valide
        if (!modal || !(modal instanceof HTMLElement)) {
            logEvent("error", "closeModal : √©l√©ment modal invalide ou non fourni");
            throw new Error("L'√©l√©ment modal fourni est invalide ou inexistant.");
        }

        logEvent("info", "Fermeture de la modale de mot de passe en cours");

        // Nettoie les √©v√©nements attach√©s pour √©viter les fuites m√©moire
        detachModalEvents(modal);

        // V√©rifie si la modale est bien active avant de tenter de la fermer
        if (!modal.classList.contains("active")) {
            logEvent("warning", "closeModal : la modale n'√©tait pas active, tentative de fermeture ignor√©e.");
            return;
        }

        // D√©clenche l'animation de fermeture
        modal.classList.remove("active");

        // Ajoute un √©couteur d'√©v√©nement pour supprimer la modale apr√®s l'animation
        modal.addEventListener("transitionend", () => {
            try {
                removeModalFromDOM(modal);
            } catch (error) {
                logEvent("error", "closeModal : erreur lors de la suppression de la modale", { message: error.message });
            }
        }, { once: true });

    } catch (error) {
        logEvent("critical", "Erreur critique lors de la fermeture de la modale", { message: error.message });
        throw error;
    }
}

/* ===================================================================
/* 10. Suppression de la Modale du DOM 
/* ====================================================================
/*
/*   Cette fonction g√®re la suppression de la modale apr√®s l'animation.
/*   V√©rifie que l'√©l√©ment existe et est bien attach√© avant suppression.
/*   Enregistre les erreurs pour faciliter le d√©bogage.
/*
/*-------------------------------------------------------------------*/

/**
 * Supprime la modale du DOM apr√®s la fermeture.
 *
 * - V√©rifie que la modale existe et qu'elle est bien attach√©e avant suppression.
 * - Capture et enregistre les erreurs √©ventuelles lors de la suppression.
 * - Ajoute des logs pour suivre les actions effectu√©es.
 *
 * @param {HTMLElement} modal - √âl√©ment DOM de la modale √† supprimer.
 * @throws {Error} Si la suppression √©choue en raison d'un √©l√©ment invalide.
 */
function removeModalFromDOM(modal) {
    try {
        // V√©rifie que la modale est un √©l√©ment valide et attach√© au DOM
        if (!modal || !(modal instanceof HTMLElement)) {
            logEvent("error", "removeModalFromDOM : √©l√©ment modal invalide ou non fourni.");
            throw new Error("Impossible de supprimer la modale : √©l√©ment invalide.");
        }

        if (!modal.parentNode) {
            logEvent("warning", "removeModalFromDOM : tentative de suppression d'une modale inexistante dans le DOM.");
            return;
        }

        // Suppression propre de la modale
        modal.remove();
        logEvent("info", "Modale de mot de passe ferm√©e et supprim√©e du DOM.");

    } catch (error) {
        // Enregistre l'erreur et la remonte pour un traitement en amont si n√©cessaire
        logEvent("critical", "Erreur critique lors de la suppression de la modale", { message: error.message });
        throw error;
    }
}




