/* ====================================================================================
/*  FICHIER          : GraphRenderer.js
/*  AUTEUR           : Trackozor
/*  VERSION          : 2.0
/*  DATE DE CR√âATION : 11/02/2025
/*  DERNI√àRE MODIF.  : 13/02/2025
/*  DESCRIPTION      : Gestion de l'affichage graphique des performances en temps r√©el.
/*                     - Mise √† jour dynamique des benchmarks.
/*                     - S√©lection du type de graphique (courbe, barre, radar).
/*                     - Affichage ergonomique et interactif.
/* ==================================================================================== */

export class GraphRenderer {
    /* ====================================================================================
    /*  SECTION 1 : INITIALISATION DU GRAPHIQUE
    /* ==================================================================================== */

    /**
     * Cr√©e le panneau des graphiques avec une s√©lection du type de graphe.
     * @returns {HTMLElement} - Conteneur principal du panneau graphique.
     */
    static createGraphPanel() {
        const panel = document.createElement("div");
        panel.id = "benchmark-graph-panel";
        panel.classList.add("graph-container");

        panel.innerHTML = `
            <div class="graph-header">
                <span> Performance Graph</span>
                <select id="graph-type">
                    <option value="line">Courbe</option>
                    <option value="bar">Barres</option>
                    <option value="radar">üï∏ Radar</option>
                </select>
            </div>
            <canvas id="benchmarkChart"></canvas>
        `;

        this.initChart(); // Initialise le graphique par d√©faut
        return panel;
    }

    /* ====================================================================================
    /*  SECTION 2 : INITIALISATION DU CHART (CHART.JS)
    /* ==================================================================================== */

    /**
     * Initialise un graphique avec `Chart.js`, permettant l'affichage en temps r√©el des benchmarks.
     * 
     */
    static initChart() {
        const ctx = document.getElementById("benchmarkChart");
        if (!ctx) {
            console.error("GraphRenderer : Impossible d'initialiser le graphique (canvas non trouv√©)");
            return;
        }

        this.chart = new Chart(ctx, {
            type: "line", // Type de graphique par d√©faut (courbe)
            data: {
                labels: [], // √âtiquettes des benchmarks
                datasets: [{
                    label: "Temps d'ex√©cution (ms)", // L√©gende du graphe
                    data: [], // Donn√©es en temps r√©el
                    borderWidth: 2, // √âpaisseur des lignes
                }]
            },
            options: {
                responsive: true, // Rend le graphe adaptable √† la taille de l'√©cran
                maintainAspectRatio: false, // D√©sactive la contrainte de ratio
                animation: {
                    duration: 500 // Animation fluide sur les mises √† jour
                },
                scales: {
                    y: {
                        beginAtZero: true // Assure que l'axe Y d√©marre √† z√©ro
                    }
                }
            }
        });

        // √âcouteur d'√©v√©nements pour changer le type de graphique en temps r√©el
        document.getElementById("graph-type").addEventListener("change", (event) => {
            this.updateChartType(event.target.value);
        });
    }

    /* ====================================================================================
    /*  SECTION 3 : MISE √Ä JOUR DU GRAPHIQUE AVEC DE NOUVELLES DONN√âES
    /* ==================================================================================== */

    /**
     * Ajoute une nouvelle entr√©e au graphique en temps r√©el.
     * @param {string} label - Nom du test ou de la fonction benchmark√©e.
     * @param {number} executionTime - Temps d'ex√©cution en millisecondes.
     */
    static updateGraph(label, executionTime) {
        if (!this.chart) {
            console.error("GraphRenderer : Aucune instance de graphique trouv√©e.");
            return;
        }

        // Ajout des nouvelles donn√©es
        this.chart.data.labels.push(label);
        this.chart.data.datasets[0].data.push(executionTime);
        this.chart.update(); // Met √† jour l'affichage

        console.log(`GraphRenderer : Donn√©es mises √† jour ‚Üí ${label} : ${executionTime} ms`);
    }

    /* ====================================================================================
    /*  SECTION 4 : CHANGEMENT DU TYPE DE GRAPHIQUE
    /* ==================================================================================== */

    /**
     * Modifie dynamiquement le type de graphique (courbes, barres, radar...).
     * @param {string} newType - Type de graphique souhait√© ("line", "bar", "radar").
     */
    static updateChartType(newType) {
        if (!this.chart) {
            console.error("GraphRenderer : Impossible de modifier le type de graphique.");
            return;
        }

        console.log(`GraphRenderer : Changement du graphique vers le type ${newType.toUpperCase()}`);

        // R√©cup√®re les donn√©es existantes et d√©truit le graphique actuel
        const chartData = this.chart.data;
        this.chart.destroy();
        const ctx = document.getElementById("benchmarkChart").getContext("2d");

        // Cr√©ation du nouveau graphique avec le type s√©lectionn√©
        this.chart = new Chart(ctx, {
            type: newType,
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });
    }
}
