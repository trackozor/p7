/**
 * ===============================================================
 * Nom du fichier : domSelectors.js
 * Description    : Centralisation des s√©lecteurs DOM pour l'application Fisheye.
 * Auteur         : Trackozor
 * Date           : 05/01/2025
 * Version        : 1.7.0 (R√©organisation des fonctions et optimisation)
 * ===============================================================
 *
 * Objectifs :
 * - Charger dynamiquement les s√©lecteurs selon la page en cours.
 * - V√©rifier la pr√©sence des s√©lecteurs essentiels au bon fonctionnement.
 * - Ajouter des logs d√©taill√©s pour chaque √©l√©ment trouv√© ou manquant.
 * ===============================================================
 */
/*==============================================*/
/*                 Import                       */
/*==============================================*/
import { logEvent } from "../utils/utils.js";


/*==============================================*/
/*          R√©cup√©ration √©l√©ments DOM           */
/*==============================================*/
const domCache = new Map(); // Stocke les s√©lections DOM pour √©viter les requ√™tes r√©p√©t√©es


/**------------------------------------------------------------------------------------
 *  FONCTION :S√©lectionne un √©l√©ment du DOM en toute s√©curit√© avec gestion du cache et des erreurs.
 * --------------------------------------------------------------------------------------
 * 
 * - Utilise un cache (`domCache`) pour √©viter les requ√™tes r√©p√©titives.
 * - V√©rifie si l'√©l√©ment est toujours pr√©sent dans le DOM avant de l'utiliser.
 * - G√®re les erreurs si l'√©l√©ment est absent, sauf s'il est optionnel.
 * 
 * @param {string} selector - S√©lecteur CSS de l'√©l√©ment √† r√©cup√©rer.
 * @param {boolean} [isOptional=false] - Si `true`, ne g√©n√®re pas d'erreur si l'√©l√©ment est introuvable.
 * @returns {Element|null} L'√©l√©ment DOM trouv√© ou `null` si non trouv√©.
 */
export function safeQuerySelector(selector, isOptional = false) {
    // V√©rifie d'abord si l'√©l√©ment est d√©j√† pr√©sent dans le cache
    if (domCache.has(selector)) {
        const cachedElement = domCache.get(selector);

        // V√©rifie si l'√©l√©ment en cache est toujours dans le DOM
        if (document.body.contains(cachedElement)) {
            return cachedElement; // Retourne l'√©l√©ment valide depuis le cache
        } else {
            domCache.delete(selector); // Supprime du cache si l'√©l√©ment n'existe plus
        }
    }

    // Recherche de l'√©l√©ment dans le DOM si absent du cache ou supprim√© du DOM
    const element = document.querySelector(selector);

    // Gestion des cas o√π l'√©l√©ment n'est pas trouv√©
    if (!element) {
        if (!isOptional) {
            logEvent("error", `√âl√©ment non trouv√© : ${selector}`); // Log d'erreur si l'√©l√©ment est requis
        }
        return null; // Retourne `null` si l'√©l√©ment est introuvable
    }

    // Si l'√©l√©ment est trouv√©, l'ajoute dans le cache pour √©viter une nouvelle requ√™te
    logEvent("info", `√âl√©ment trouv√© : ${selector}`);
    domCache.set(selector, element);

    return element; // Retourne l'√©l√©ment s√©lectionn√©
}

/**-------------------------------------------------------------------------------
 *  FONCTION: S√©lectionne plusieurs √©l√©ments du DOM en toute s√©curit√© avec gestion du cache.
 * -------------------------------------------------------------------------------
 * 
 * - Stocke la `NodeList` en cache (`domCache`) pour √©viter les requ√™tes r√©p√©titives.
 * - V√©rifie si les √©l√©ments en cache existent toujours dans le DOM avant de les utiliser.
 * - Journalise les r√©sultats et g√®re les cas o√π aucun √©l√©ment n'est trouv√©.
 * 
 * @param {string} selector - S√©lecteur CSS des √©l√©ments √† r√©cup√©rer.
 * @returns {NodeList} Liste des √©l√©ments trouv√©s (peut √™tre vide).
 */
export function safeQuerySelectorAll(selector) {
    // V√©rifie si la NodeList est d√©j√† pr√©sente et toujours valide dans le cache
    if (domCache.has(selector)) {
        const cachedNodeList = domCache.get(selector);

        // V√©rifie si la liste d'√©l√©ments est encore valide en testant le premier √©l√©ment
        if (cachedNodeList.length > 0 && document.body.contains(cachedNodeList[0])) {
            return cachedNodeList; // Retourne la liste d'√©l√©ments valide depuis le cache
        } else {
            domCache.delete(selector); // Supprime la NodeList invalide du cache
        }
    }

    // Recherche des √©l√©ments correspondants dans le DOM
    const elements = document.querySelectorAll(selector);

    // Gestion des cas o√π aucun √©l√©ment correspondant n'est trouv√©
    if (!elements.length) {
        logEvent("warn", `Aucun √©l√©ment trouv√© pour : ${selector}`);
    } else {
        logEvent("info", `√âl√©ments trouv√©s pour : ${selector}, total : ${elements.length}`);
        domCache.set(selector, elements); // Stocke la NodeList dans le cache
    }

    return elements; // Retourne la liste des √©l√©ments trouv√©s (peut √™tre vide)
}



/**------------------------------------------------------------------------
 *  FONCTION: Vide enti√®rement le cache des s√©lections DOM.
 * -----------------------------------------------------------------------
 * 
 * - Supprime toutes les entr√©es stock√©es dans `domCache`.
 * - Permet de forcer une nouvelle r√©cup√©ration des √©l√©ments du DOM.
 * - Journalise l‚Äôaction pour un meilleur suivi dans la console.
 */
export function clearDomCache() {
    // Vide compl√®tement le cache des s√©lections DOM
    domCache.clear();

    // Journalise l'action pour indiquer que le cache a √©t√© supprim√©
    logEvent("info", "Cache des s√©lections DOM vid√© avec succ√®s.");
}


/*==============================================*/
/*            designation page                  */
/*==============================================*/

/**---------------------------------------------------------------
 *  FONCTION : D√©termine la page actuelle en fonction de l'URL.
 *---------------------------------------------------------------
 * 
 * - Analyse `window.location.pathname` pour identifier la page courante.
 * - Renvoie `"photographer"` si l'URL contient `"photographer"`.
 * - Renvoie `"index"` si l'URL contient `"index"` ou correspond √† la racine `/`.
 * - Renvoie `"unknown"` si aucun match n'est trouv√©.
 * 
 * @returns {string} Le nom de la page d√©tect√©e (`"index"`, `"photographer"` ou `"unknown"`).
 */
export function getCurrentPage() {
    // R√©cup√®re le chemin de l'URL et le met en minuscules pour √©viter toute casse sensible
    const url = window.location.pathname.toLowerCase();

    // V√©rifie si l'URL correspond √† une page photographe
    if (url.includes("photographer")) {
        return "photographer"; // Page d√©tect√©e : photographe
    }

    // V√©rifie si l'URL correspond √† la page d'accueil (index.html ou `/`)
    if (url.includes("index") || url === "/") {
        return "index"; // Page d√©tect√©e : index
    }

    // Si aucune correspondance trouv√©e, renvoie "unknown"
    return "unknown"; // Page inconnue
}

/*==============================================*/
/*       definition s√©lecteurs page index       */
/*==============================================*/

/**---------------------------------------------------------------
 *  FONCTION : R√©cup√®re les s√©lecteurs sp√©cifiques pour la page d'accueil (`index.html`).
 *---------------------------------------------------------------
 * 
 * - Utilise `safeQuerySelector()` pour r√©cup√©rer les √©l√©ments du DOM en toute s√©curit√©.
 * - S√©pare les s√©lecteurs en deux groupes : `indexPage` (√©l√©ments principaux) et `templates` (mod√®les r√©utilisables).
 * - Certains s√©lecteurs (`photographerTemplate`) sont facultatifs (`true`).
 * 
 * @returns {Object} Un objet contenant les s√©lecteurs organis√©s par cat√©gorie.
 */
export function getIndexSelectors() {
    return {
        // üìå S√©lecteurs principaux de la page
        indexPage: {
            body: document.body,
            header: document.querySelector("header"),
            main: document.querySelector("main"),
            footer: document.querySelector("footer"),
        },

        // üìå S√©lecteurs li√©s au logo et aux images de fond
        branding: {
            logo: document.querySelector(".logo"),
            backgroundImage: document.querySelector(".fond"),
        },

        // üìå Barre de recherche
        search: {
            form: document.querySelector(".search-bar"),
            input: document.querySelector("#search"),
            button: document.querySelector("#search-btn"),
        },

        // üìå Filtres interactifs
        filters: {
            section: document.querySelector("#filters"),
            ingredientList: document.querySelector("#ingredient-list"),
            applianceList: document.querySelector("#appliance-list"),
            ustensilList: document.querySelector("#ustensil-list"),
        },

        // üìå Conteneur des recettes (l√† o√π on injecte les cartes)
        recipes: {
            container: document.querySelector("#recipes-container .container"),
        },

        // üìå Conteneur des filtres dynamiques
        filterDropdowns: {
            ingredientDropdown: document.querySelector("#filter-ingredients"),
            applianceDropdown: document.querySelector("#filter-appliances"),
            ustensilDropdown: document.querySelector("#filter-ustensils"),
        },

        // üìå Footer et informations l√©gales
        footer: {
            container: document.querySelector("footer .container"),
            copyright: document.querySelector("footer p"),
        },
    };
}




/*==============================================*/
/*    Verification pr√©sence s√©lecteurs   */
/*==============================================*/

/**---------------------------------------------------------------
 *  FONCTION : V√©rifie r√©cursivement la pr√©sence des s√©lecteurs dans un objet donn√©.
 *---------------------------------------------------------------
 * 
 * - Parcourt de mani√®re r√©cursive un objet contenant des s√©lecteurs DOM.
 * - Ajoute les s√©lecteurs manquants dans un tableau `missingSelectors`.
 *
 * 
 * @param {Object} obj - Objet contenant les s√©lecteurs √† v√©rifier.
 * @param {string} [parentKey=""] - Cl√© parent pour g√©n√©rer le chemin complet du s√©lecteur.
 * @param {Array<string>} [missingSelectors=[]] - Tableau contenant les s√©lecteurs manquants.
 * @returns {Array<string>} Liste des s√©lecteurs manquants.
 */
export function recursiveCheck(obj, parentKey = "", missingSelectors = []) {
    Object.entries(obj).forEach(([key, value]) => {
        // Construit la cl√© compl√®te pour suivre la hi√©rarchie
        const fullKey = parentKey ? `${parentKey}.${key}` : key;

        // Si la valeur est un objet, on applique la r√©cursivit√©
        if (typeof value === "object" && value !== null) {
            recursiveCheck(value, fullKey, missingSelectors);
        } 
        // Si la valeur est absente (null ou undefined), elle est ajout√©e aux s√©lecteurs manquants
        else if (!value) {
            missingSelectors.push(fullKey); //  Ajoute le s√©lecteur manquant √† la liste
        }
    });

    return missingSelectors; // Retourne la liste des s√©lecteurs manquants
}


/**---------------------------------------------------------------
 *  FONCTION : V√©rifie la pr√©sence des s√©lecteurs n√©cessaires pour une page donn√©e.
 *---------------------------------------------------------------
 * 
 * - Utilise la fonction `recursiveCheck()` pour parcourir l'objet des s√©lecteurs.
 * - Retourne une liste des s√©lecteurs manquants.
 * 
 * @param {Object} selectors - Objet contenant les s√©lecteurs DOM de la page.
 * @returns {Array<string>} Liste des s√©lecteurs manquants.
 */
export function checkSelectors(selectors) {
    return recursiveCheck(selectors); //  Ex√©cute la v√©rification r√©cursive des s√©lecteurs
}

/*==============================================*/
/*          Chargement s√©lecteurs               */
/*==============================================*/
/**---------------------------------------------------------------
 *  FONCTION : Charge dynamiquement les s√©lecteurs en fonction de la page actuelle.
 *---------------------------------------------------------------
 * 
 * - D√©tecte la page en cours gr√¢ce √† `getCurrentPage()`.
 * - S√©lectionne les s√©lecteurs correspondants (`index.html` ou `photographer.html`).
 * - V√©rifie si des s√©lecteurs sont manquants via `checkSelectors()`.
 * - Journalise les informations et erreurs √©ventuelles.
 * 
 * @returns {Object} Objet contenant les s√©lecteurs sp√©cifiques √† la page actuelle.
 */
export function loadSelectorsForCurrentPage() {
    //  D√©tecte la page actuelle en fonction de l'URL
    const currentPage = getCurrentPage();
    logEvent("info", `Page d√©tect√©e : ${currentPage}`);

    // Initialisation des s√©lecteurs (par d√©faut vide)
    let selectors = {};

    // S√©lectionne les s√©lecteurs correspondant √† la page actuelle
    if (currentPage === "index") {
        selectors = getIndexSelectors(); // Charge les s√©lecteurs pour la page index
    } else if (currentPage === "photographer") {
        selectors = getPhotographerSelectors(); // Charge les s√©lecteurs pour la page photographe
    }

    //  V√©rification des s√©lecteurs manquants
    const missingSelectors = checkSelectors(selectors);
    if (missingSelectors.length > 0) {
        logEvent("error", "S√©lecteurs manquants d√©tect√©s.", { missingSelectors });
    }

    return selectors; // Retourne l'objet des s√©lecteurs trouv√©s
}


/*==============================================*/
/*           Initialisation s√©lecteurs          */
/*==============================================*/

/**---------------------------------------------------------------
 *  FONCTION : Rafra√Æchit dynamiquement les s√©lecteurs DOM.
 *---------------------------------------------------------------
 * 
 * - Vide le cache des s√©lecteurs pour √©viter l‚Äôutilisation d‚Äô√©l√©ments obsol√®tes.
 * - Recharge les s√©lecteurs en fonction de la page actuelle.
 * - Met √† jour l‚Äôobjet `domSelectors` avec les nouveaux s√©lecteurs.
 * - Journalise l‚Äôop√©ration pour le suivi des mises √† jour.
 */
export function refreshSelectors() {
    logEvent("info", "Rafra√Æchissement des s√©lecteurs DOM...");

    // Vide le cache des s√©lections pour garantir une nouvelle r√©cup√©ration
    clearDomCache();

    // Recharge les s√©lecteurs en fonction de la page active et met √† jour `domSelectors`
    Object.assign(domSelectors, loadSelectorsForCurrentPage());

    logEvent("success", "S√©lecteurs DOM mis √† jour avec succ√®s.");
}



/**---------------------------------------------------------------
 *  FONCTION : Initialise les s√©lecteurs apr√®s le chargement du DOM.
 *---------------------------------------------------------------
 */
function initializeDomSelectors() {
    logEvent("info", "Initialisation des s√©lecteurs DOM...");

    Object.assign(domSelectors, loadSelectorsForCurrentPage());

    logEvent("success", "S√©lecteurs DOM charg√©s.");
}

// Initialisation diff√©r√©e apr√®s le chargement complet du DOM
document.addEventListener("DOMContentLoaded", initializeDomSelectors);

/**---------------------------------------------------------------
 *  OBJET : `domSelectors` - Stocke tous les s√©lecteurs globaux.
 *---------------------------------------------------------------
 */
const domSelectors = {
    safeQuerySelector, 
    getCurrentPage, 
    refreshSelectors,
};

/**---------------------------------------------------------------
 *  FONCTION : Observe les modifications du DOM et met √† jour les s√©lecteurs dynamiquement.
 *---------------------------------------------------------------
 * 
 * - Utilise `MutationObserver` pour d√©tecter l'ajout de nouveaux √©l√©ments au DOM.
 * - V√©rifie si un √©l√©ment surveill√© a √©t√© ajout√© avant de rafra√Æchir les s√©lecteurs.
 * - √âvite les mises √† jour inutiles pour pr√©server les performances.
 * - Journalise les √©v√©nements pour assurer un bon suivi des changements d√©tect√©s.
 */
function observeDomChanges() {
    const observer = new MutationObserver((mutations) => {
        const modifiedSelectors = new Set(); //  √âvite les doublons

        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === Node.ELEMENT_NODE) {
                    for (const selector of Object.values(domSelectors)) {
                        if (selector instanceof Element && node.contains(selector)) {
                            modifiedSelectors.add(selector);
                        }
                    }
                }
            });
        });

        if (modifiedSelectors.size > 0) {
            logEvent("info", `Modification d√©tect√©e (${modifiedSelectors.size} √©l√©ment(s) touch√©(s)), mise √† jour...`);
            refreshSelectors();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });
    logEvent("success", "Observation des changements du DOM activ√©e.");
}



/*==============================================*/
/*        ACTIVATION DE L'OBSERVATION DOM       */
/*==============================================*/

/**---------------------------------------------------------------
 *  ACTIVATION : D√©marre l'observation des changements du DOM.
 *---------------------------------------------------------------
 * 
 * - Assure que l'observation ne d√©marre qu'apr√®s l'initialisation des s√©lecteurs.
 * - Surveille les modifications du DOM pour d√©tecter l'ajout ou la suppression d'√©l√©ments cl√©s.
 * - Permet de maintenir `domSelectors` toujours √† jour sans impact sur les performances.
 */
document.addEventListener("DOMContentLoaded", () => {
    logEvent("info", "Initialisation compl√®te du DOM. D√©marrage de l'observation...");
    observeDomChanges();
});

export default domSelectors;
