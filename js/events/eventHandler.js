/* ==================================================================================== */
/*  FICHIER          : eventHandler.js                                                 */
/*  AUTEUR           : Trackozor                                                       */
/*  VERSION          : 1.3                                                              */
/*  DATE DE CR√âATION : 08/02/2025                                                       */
/*  DERNI√àRE MODIF.  : 12/02/2025                                                       */
/*  DESCRIPTION      : G√®re les √©v√©nements de recherche et de filtres sur les recettes */
/*                     - Recherche dynamique des recettes.                             */
/*                     - Filtrage des r√©sultats par ingr√©dients, ustensiles, appareils.*/
/*                     - Mise √† jour automatique des filtres dans l'interface.         */
/* ==================================================================================== */

import { searchRecipesLoopNative } from "../components/search/searchloopnative.js";
import { getAllRecipes, fetchFilterOptions } from "../data/dataManager.js";
import domSelectors from "../config/domSelectors.js";
import { logEvent } from "../utils/utils.js";
import {requestAdminAccess, triggerNormalSearch} from "../main.js";
import { waitForElement } from "../utils/utils.js";
import { RecipeFactory } from "../components/factory/recipeFactory.js";
import { searchRecipesFunctional } from "../components/search/searchFunctional.js";
import {sanitizeText } from "../utils/utils.js";


/* ==================================================================================== */
/*  GESTION DES DROPDOWNS                                                              */
/* ==================================================================================== */

/**
     * Ajoute les √©v√©nements d'affichage et de fermeture des dropdowns.
     *
     * - Ouvre/ferme le dropdown au clic sur le bouton associ√©.
     * - Ferme automatiquement le dropdown si l'utilisateur clique ailleurs.
     * - Utilise la d√©l√©gation d'√©v√©nements pour optimiser la gestion des √©v√©nements globaux.
     *
     * @param {HTMLElement} filterButton - Bouton permettant d'afficher le dropdown.
     * @param {HTMLElement} dropdownContainer - Conteneur du menu d√©roulant.
     */
export function setupDropdownEvents(filterButton, dropdownContainer) {
    try {
            if (!(filterButton instanceof HTMLElement) || !(dropdownContainer instanceof HTMLElement)) {
                logEvent("error", "setupDropdownEvents : Param√®tres invalides.", { filterButton, dropdownContainer });
                return;
            }

            // Gestion de l'ouverture/fermeture du dropdown au clic sur le bouton
            filterButton.addEventListener("click", (event) => {
                event.stopPropagation(); // Emp√™che la fermeture imm√©diate
                const isOpen = !dropdownContainer.classList.contains("hidden");
                document.querySelectorAll(".filter-dropdown").forEach(drop => drop.classList.add("hidden"));
                if (!isOpen) {
                    dropdownContainer.classList.remove("hidden");
                    logEvent("info", "setupDropdownEvents : Dropdown ouvert.");
                } else {
                    logEvent("info", "setupDropdownEvents : Dropdown ferm√©.");
                }
            });

            // Gestion de la fermeture du dropdown si l'utilisateur clique en dehors
            document.addEventListener("click", (event) => {
                if (!filterButton.contains(event.target) && !dropdownContainer.contains(event.target) && !dropdownContainer.classList.contains("hidden")) {
                    dropdownContainer.classList.add("hidden");
                    logEvent("info", "setupDropdownEvents : Dropdown ferm√© en cliquant √† l'ext√©rieur.");
                }
            });

            logEvent("success", "setupDropdownEvents : √âv√©nements du dropdown configur√©s.");
    } catch (error) {
        logEvent("error", "setupDropdownEvents : Erreur lors de la configuration des √©v√©nements.", { error: error.message });
    }
}

/* ================================================================================ 
    GESTION DE L'√âV√âNEMENT DE RECHERCHE 
================================================================================ */

/**
 * G√®re la recherche de recettes lorsqu'un utilisateur saisit du texte.
 *
 * - V√©rifie la pr√©sence de l'√©l√©ment de recherche dans le DOM.
 * - Ignore la recherche si la saisie contient moins de 3 caract√®res.
 * - Ex√©cute une recherche et affiche les r√©sultats mis √† jour.
 * - Utilise `logEvent()` pour suivre chaque √©tape et d√©tecter les erreurs.
 */
export async function handleSearch() {
    try {
        // V√©rifie que `domSelectors.search` est d√©fini et contient `input`
        if (!domSelectors || !domSelectors.search || !domSelectors.search.input) {
            logEvent("error", "handleSearch : √âl√©ment input de recherche introuvable.");
            return;
        }

        // R√©cup√®re l'√©l√©ment de saisie correctement
        const searchInput = domSelectors.search.input; 
        try {
            const query = searchInput.value.trim();

            if (query === "/benchmark" || query === "!benchmark") {
                logEvent("info", "Commande Benchmark d√©tect√©e. Affichage de la modale.");
                requestAdminAccess();
            } else {
                logEvent("info", `Recherche normale d√©clench√©e : ${query}`);
                triggerNormalSearch(query);
            }
        } catch (error) {
            logEvent("error", "Erreur lors de la d√©tection du mode Benchmark", { error: error.message });
        }
        // V√©rifie que l'√©l√©ment input existe r√©ellement dans le DOM
        if (!searchInput) {
            logEvent("error", "handleSearch : √âl√©ment input non trouv√© dans le DOM.");
            return;
        }

        // R√©cup√®re la valeur et la nettoie (trim enl√®ve les espaces inutiles)
        const query = searchInput.value.trim();

        // V√©rifie que l'utilisateur a saisi au moins 3 caract√®res
        if (query.length < 3) {
            logEvent("info", "handleSearch : Recherche ignor√©e (moins de 3 caract√®res).");
            return; 
        }

        // Log que la recherche commence
        logEvent("info", `handleSearch : Recherche en cours pour "${query}"...`);

        // R√©cup√®re les r√©sultats de la recherche
        const results = await searchRecipesLoopNative(query);

        // V√©rifie que les r√©sultats sont bien un tableau
        if (!Array.isArray(results)) {
            logEvent("error", "handleSearch : R√©sultat de recherche invalide.", { results });
            return; 
        }

        // Affiche les r√©sultats trouv√©s
        displayResults(results);

        // Log du succ√®s avec le nombre de r√©sultats
        logEvent("success", `handleSearch : ${results.length} r√©sultats trouv√©s.`);

    } catch (error) {
        logEvent("error", "handleSearch : Erreur lors de la recherche.", { error: error.message });
    }
}

/*================================================================
 *    Gestion des √©v√©nements pour la modale du mot de passe
/*===============================================================*/

/**
 * Attache les √©v√©nements √† la modale de mot de passe.
 *
 * @param {HTMLInputElement} passwordInput - Champ de saisie du mot de passe.
 * @param {HTMLButtonElement} validateBtn - Bouton de validation.
 * @param {HTMLButtonElement} cancelBtn - Bouton d'annulation.
 * @param {HTMLElement} modal - √âl√©ment de la modale.
 */
export function attachModalEvents(passwordInput, validateBtn, cancelBtn, modal) {
    try {
        logEvent("info", "üîÑ attachModalEvents : Attachement des √©v√©nements √† la modale...");

        // V√©rifie la pr√©sence des √©l√©ments requis
        if (!passwordInput || !validateBtn || !cancelBtn || !modal) {
            logEvent("error", "‚ùå attachModalEvents : Un ou plusieurs √©l√©ments sont manquants.", {
                passwordInput,
                validateBtn,
                cancelBtn,
                modal
            });
            return;
        }

        //  Ajout des √©couteurs d'√©v√©nements
        validateBtn.addEventListener("click", () => handleValidation(passwordInput, modal));
        cancelBtn.addEventListener("click", () => handleClose(modal));
        passwordInput.addEventListener("keydown", (event) => handleEnterKey(event, passwordInput, modal));

        //  Ajoute un gestionnaire de fermeture avec "√âchap"
        document.addEventListener("keydown", (event) => {
            if (event.key === "Escape") {
                logEvent("info", "üö™ Fermeture de la modale via la touche √âchap.");
                handleClose(modal);
            }
        }, { once: true });

        //  Ajoute une m√©thode pour nettoyer les √©v√©nements √† la fermeture
        modal.cleanup = () => detachModalEvents(passwordInput, validateBtn, cancelBtn, modal);

        logEvent("success", " attachModalEvents : √âv√©nements attach√©s avec succ√®s.");
    } catch (error) {
        logEvent("error", " attachModalEvents : Erreur lors de l'attachement des √©v√©nements √† la modale.", { error: error.message });
    }
}


// ==========================================================
// Gestion de la Validation du Mot de Passe
// ==========================================================

/**
 * V√©rifie le mot de passe et ferme la modale si correct.
 *
 * @param {HTMLInputElement} passwordInput - Champ de saisie du mot de passe.
 * @param {HTMLElement} modal - √âl√©ment de la modale.
 */
function handleValidation(passwordInput, modal) {
    const enteredPassword = passwordInput.value.trim();
    logEvent("info", ` Mot de passe saisi : ${enteredPassword}`);

    if (enteredPassword === "admin123") { //  Remplace ici par ton mot de passe r√©el
        logEvent("success", " Mot de passe correct, acc√®s autoris√©.");
        alert("Acc√®s autoris√© !");
        handleClose(modal);
        enableBenchmarkMode(); //  Active le mode Benchmark si n√©cessaire
    } else {
        logEvent("error", " Mot de passe incorrect.");
        alert("Mot de passe incorrect. R√©essayez.");
        passwordInput.value = "";
        passwordInput.focus();
    }
}



// ==========================================================
// Gestion de la Fermeture de la Modale
// ==========================================================

/**
 * Ferme la modale proprement et nettoie les √©v√©nements.
 *
 * @param {HTMLElement} modal - √âl√©ment de la modale.
 */
function handleClose(modal) {
    if (modal) {
        logEvent("info", "üö™ Fermeture de la modale.");
        modal.classList.remove("active");

        setTimeout(() => {
            modal.remove();
            logEvent("success", " Modale supprim√©e du DOM.");
        }, 300);
    }
}


// ==========================================================
// Gestion de la Validation par la Touche "Enter"
// ==========================================================

/**
 * G√®re la validation avec la touche "Entr√©e".
 *
 * @param {KeyboardEvent} event - √âv√©nement de touche.
 * @param {HTMLInputElement} passwordInput - Champ de saisie du mot de passe.
 * @param {HTMLElement} modal - √âl√©ment de la modale.
 */
function handleEnterKey(event, passwordInput, modal) {
    if (event.key === "Enter") {
        logEvent("info", " Validation du mot de passe via la touche Entr√©e.");
        handleValidation(passwordInput, modal);
    }
}



// ==========================================================
// Validation des Param√®tres de handleEnterKey
// ==========================================================

/**
 * V√©rifie la validit√© des param√®tres fournis √† `handleEnterKey`.
 *
 * - V√©rifie que l'√©v√©nement est bien un `KeyboardEvent`.
 * - V√©rifie que `passwordInput` est un champ de saisie valide.
 * - V√©rifie que `callback` est une fonction.
 * - V√©rifie que `modal` est un √©l√©ment HTML valide.
 * - Enregistre une erreur et l√®ve une exception en cas de non-conformit√©.
 *
 * @param {KeyboardEvent} event - √âv√©nement de clavier.
 * @param {HTMLInputElement} passwordInput - Champ de saisie du mot de passe.
 * @param {function} callback - Fonction ex√©cut√©e apr√®s validation.
 * @param {HTMLElement} modal - √âl√©ment DOM de la modale.
 * @throws {Error} Si l'un des param√®tres est invalide.
 */
export function validateEnterKeyParameters(event, passwordInput, modal) {
    // V√©rifie que `event` est un √©v√©nement de clavier valide
    if (!(event instanceof KeyboardEvent)) {
        logEvent("error", "validateEnterKeyParameters : √âv√©nement clavier invalide.");
        throw new Error("L'√©v√©nement fourni doit √™tre un `KeyboardEvent`.");
    }

    // V√©rifie que `passwordInput` est un champ de saisie HTML valide
    if (!(passwordInput instanceof HTMLInputElement)) {
        logEvent("error", "validateEnterKeyParameters : Champ de saisie du mot de passe invalide.");
        throw new Error("Le champ de saisie du mot de passe est invalide ou inexistant.");
    }


    // V√©rifie que `modal` est bien un √©l√©ment HTML valide
    if (!(modal instanceof HTMLElement)) {
        logEvent("error", "validateEnterKeyParameters : √âl√©ment modal invalide.");
        throw new Error("L'√©l√©ment modal fourni est invalide.");
    }
}



/**==================================================================
/*  Nettoyage des √âv√©nements de la Modale 
/*==================================================================*/

/** 
 * D√©tache les √©v√©nements de la modale pour √©viter les fuites m√©moire.
 *
 * - V√©rifie si un gestionnaire de nettoyage (`cleanup`) est d√©fini.
 * - Ex√©cute le gestionnaire pour retirer les √©couteurs d'√©v√©nements.
 * - Ajoute un log en cas d'absence de gestionnaire pour le suivi.
 */
export function detachModalEvents(passwordInput, validateBtn, cancelBtn, modal) {
    try {
        // V√©rifie que tous les √©l√©ments requis sont des objets DOM valides
        if (!(passwordInput instanceof HTMLInputElement)) {
            logEvent("error", "detachModalEvents : Champ de saisie du mot de passe invalide.");
            throw new Error("Le champ de saisie du mot de passe est invalide ou inexistant.");
        }

        if (!(validateBtn instanceof HTMLElement)) {
            logEvent("error", "detachModalEvents : Bouton de validation invalide.");
            throw new Error("Le bouton de validation est invalide ou inexistant.");
        }

        if (!(cancelBtn instanceof HTMLElement)) {
            logEvent("error", "detachModalEvents : Bouton d'annulation invalide.");
            throw new Error("Le bouton d'annulation est invalide ou inexistant.");
        }

        if (!(modal instanceof HTMLElement)) {
            logEvent("error", "detachModalEvents : √âl√©ment modal invalide.");
            throw new Error("L'√©l√©ment modal fourni est invalide.");
        }

        // Suppression des √©couteurs d'√©v√©nements attach√©s
        validateBtn.removeEventListener("click", handleValidation);
        cancelBtn.removeEventListener("click", handleClose);
        passwordInput.removeEventListener("keydown", handleEnterKey);

        logEvent("info", "√âv√©nements de la modale d√©tach√©s avec succ√®s.");

    } catch (error) {
        // Capture et log l'erreur pour faciliter le d√©bogage
        logEvent("critical", "Erreur critique lors du d√©tachement des √©v√©nements de la modale", { message: error.message });
        throw error;
    }
}


/* ================================================================================ 
    AFFICHAGE DES R√âSULTATS 
================================================================================ */

let cachedFilters = {
    ingredients: [],
    appliances: [],
    ustensils: []
};

/**
 * Met √† jour et affiche les r√©sultats de recherche ainsi que les filtres.
 * 
 * - G√©n√®re une liste compl√®te des filtres d√®s le chargement et la stocke en cache.
 * - Affiche uniquement un nombre limit√© d'options dans les filtres (scrollable).
 * - Ajoute une option "Voir plus / Voir moins" pour d√©rouler toute la liste.
 *
 * @param {Array} recipes - Liste des recettes filtr√©es.
 */
export async function displayResults(recipes) {
    try {
        let resultsContainer = document.querySelector("#recipe-container");

        if (!resultsContainer) {
            logEvent("warning", "displayResults : Attente du conteneur des recettes...");
            resultsContainer = await waitForElement("#recipe-container");
        }

        if (!resultsContainer) {
            logEvent("error", "displayResults : Conteneur DOM introuvable.");
            return;
        }

        resultsContainer.innerHTML = ""; // Nettoyage des r√©sultats

        if (!Array.isArray(recipes) || recipes.length === 0) {
            logEvent("warning", "displayResults : Aucune recette trouv√©e.");
            resultsContainer.innerHTML = `<p class="no-results">Aucune recette ne correspond √† votre recherche.</p>`;
            return;
        }

        logEvent("info", `displayResults : Affichage de ${recipes.length} recettes.`);

        const fragment = document.createDocumentFragment();

        recipes.forEach(recipe => {
            const recipeCard = createRecipeCard(recipe);
            if (!(recipeCard instanceof HTMLElement)) {
                logEvent("error", `displayResults : √âl√©ment invalide pour la recette ${recipe.name}.`);
                return;
            }
            fragment.appendChild(recipeCard);
        });

        resultsContainer.appendChild(fragment);

        logEvent("success", `displayResults : ${recipes.length} recettes affich√©es.`);
    } catch (error) {
        logEvent("error", "displayResults : Erreur lors de l'affichage des r√©sultats.", { error: error.message });
    }
}


/* ================================================================================ 
    GESTION DES FILTRES 
================================================================================ */

/*----------------------------------------------------------------
/*   Gestion des √©v√©nements de filtres
/*--------------------------------------------------------------- */
/**
 * G√®re les changements dans les menus d√©roulants de filtres.
 *
 * - V√©rifie que l'√©v√©nement contient bien une valeur s√©lectionn√©e.
 * - R√©cup√®re toutes les recettes et applique un filtrage dynamique.
 * - Met √† jour l'affichage des r√©sultats et journalise les actions.
 *
 * @param {Event} event - √âv√©nement d√©clench√© par le changement de s√©lection.
 */
export async function handleFilterChange(event) {
    try {
        // 1. V√©rifie que l'√©v√©nement est valide et contient bien une cible (√©l√©ment d√©clencheur).
        if (!event || !event.target) {
            logEvent("error", "handleFilterChange : √âv√©nement ou cible invalide.");
            return; // Stoppe l'ex√©cution si l'√©v√©nement est mal form√©.
        }

        // 2. R√©cup√®re le type de filtre appliqu√© (ex: "ingredient", "appliance", "ustensil").
        const { filterType } = event.target.dataset;
        const selectedValue = event.target.value.trim(); // Nettoie la valeur s√©lectionn√©e.

        logEvent("info", `handleFilterChange : Filtre appliqu√© - ${filterType} = ${selectedValue}`);

        // 4. R√©cup√®re toutes les recettes pour appliquer un filtrage dynamique.
        const recipes =  getAllRecipes();

        // 5. Applique le filtre en fonction du type et de la valeur s√©lectionn√©e.
        const filteredRecipes = filterRecipesByType(recipes, filterType, selectedValue);

        // 6. Met √† jour l'affichage des r√©sultats avec les recettes filtr√©es.
        displayResults(filteredRecipes);

        // 7. Journalise le nombre de r√©sultats trouv√©s apr√®s application du filtre.
        logEvent("success", `handleFilterChange : ${filteredRecipes.length} recettes affich√©es apr√®s filtrage.`);
    } catch (error) {
        // 8. Capture et journalise toute erreur survenue lors du filtrage.
        logEvent("error", "handleFilterChange : Erreur lors du filtrage.", { error: error.message });
    }
}

/* ================================================================================ 
    MISE √Ä JOUR DES FILTRES DANS LE DOM 
================================================================================ */

/*----------------------------------------------------------------
/*   Remplissage des listes de filtres
/*----------------------------------------------------------------*/
/**
 * Remplit dynamiquement les listes de filtres.
 *
 * - R√©cup√®re les options de filtres via `fetchFilterOptions()`.
 * - Met √† jour les listes des filtres dans le DOM.
 * - V√©rifie si chaque cat√©gorie contient des donn√©es avant de les afficher.
 */
export async function populateFilters(filters) {
    
}


/*----------------------------------------------------------------
/*   Mise √† jour dynamique des listes de filtres
/*----------------------------------------------------------------*/

/**
 * Met √† jour dynamiquement une liste de filtres avec un affichage limit√© et un d√©filement.
 *
 * - V√©rifie si l'√©l√©ment existe avant d'attendre (`waitForElement`).
 * - Affiche seulement un nombre limit√© d'options (scrollable).
 * - Ajoute un bouton "Voir plus / Voir moins" pour √©tendre la liste.
 *
 * @param {string} listId - ID du `<ul>` o√π ins√©rer les options.
 * @param {Array} options - Liste compl√®te des options √† ins√©rer.
 * @param {number} maxVisible - Nombre d'√©l√©ments visibles avant le "Voir plus".
 */
export async function updateFilterList(listId, options, maxVisible = 10) {
}

/* ================================================================================ 
    LANCEMENT AU CHARGEMENT DU DOM 
================================================================================ */

document.addEventListener("DOMContentLoaded", populateFilters);
