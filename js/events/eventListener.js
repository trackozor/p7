/* ==================================================================================== */
/*  FICHIER          : eventListeners.js                                               */
/*  AUTEUR           : Trackozor                                                       */
/*  VERSION          : 1.1                                                             */
/*  DERNI√àRE MODIF.  : 10/02/2025                                                      */
/*  DESCRIPTION      : Attache les √©couteurs d'√©v√©nements aux √©l√©ments du DOM.         */
/*                     G√®re les interactions avec la barre de recherche et les filtres. */
/* ==================================================================================== */

import { logEvent } from "../utils/utils.js";  // Import de la fonction de logs
import domSelectors from "../config/domSelectors.js"; // Import des s√©lecteurs DOM
import { handleSearch, handleFilterChange } from "./eventHandler.js"; // Gestionnaires d'√©v√©nements

/**
 * Initialise les √©couteurs d'√©v√©nements sur les √©l√©ments de la page.
 * Attache les handlers pour la recherche et les filtres.
 */
export function initEventListeners() {
    try {
        // R√©cup√©ration des √©l√©ments DOM
        const selectors = domSelectors();

        logEvent("INFO", "üîÑ Initialisation des √©couteurs d'√©v√©nements...");

        /* ================================================================================ 
            üîç √âCOUTEURS DE LA BARRE DE RECHERCHE
        ================================================================================ */

        if (selectors.search.input && selectors.search.form) {
            selectors.search.input.addEventListener("input", handleSearch);
            selectors.search.form.addEventListener("submit", (event) => {
                event.preventDefault(); // Emp√™che le rechargement de la page
                handleSearch();
            });
            logEvent("SUCCESS", "‚úÖ √âcouteurs attach√©s √† la barre de recherche.");
        } else {
            logEvent("ERROR", "‚ùå Impossible de trouver les √©l√©ments de recherche.", { selectors });
        }

        /* ================================================================================ 
            üéõÔ∏è √âCOUTEURS DES FILTRES DYNAMIQUES
        ================================================================================ */

        if (selectors.filterDropdowns) {
            const { ingredientDropdown, applianceDropdown, ustensilDropdown } = selectors.filterDropdowns;

            // V√©rification et ajout des √©couteurs sur chaque filtre
            if (ingredientDropdown) {
                ingredientDropdown.addEventListener("change", handleFilterChange);
                logEvent("SUCCESS", "‚úÖ √âcouteur ajout√© au filtre 'Ingr√©dients'.");
            } else {
                logEvent("ERROR", "‚ö†Ô∏è √âl√©ment DOM 'ingredientDropdown' introuvable.");
            }

            if (applianceDropdown) {
                applianceDropdown.addEventListener("change", handleFilterChange);
                logEvent("SUCCESS", "‚úÖ √âcouteur ajout√© au filtre 'Appareils'.");
            } else {
                logEvent("ERROR", "‚ö†Ô∏è √âl√©ment DOM 'applianceDropdown' introuvable.");
            }

            if (ustensilDropdown) {
                ustensilDropdown.addEventListener("change", handleFilterChange);
                logEvent("SUCCESS", "‚úÖ √âcouteur ajout√© au filtre 'Ustensiles'.");
            } else {
                logEvent("ERROR", "‚ö†Ô∏è √âl√©ment DOM 'ustensilDropdown' introuvable.");
            }

        } else {
            logEvent("ERROR", "‚ùå Impossible de r√©cup√©rer les filtres dropdowns.", { selectors });
        }

        logEvent("SUCCESS", "üéâ Tous les √©couteurs d'√©v√©nements sont attach√©s avec succ√®s.");
        
    } catch (error) {
        logEvent("ERROR", "üö® Erreur critique lors de l'initialisation des √©couteurs d'√©v√©nements.", { error: error.message });
    }
}
