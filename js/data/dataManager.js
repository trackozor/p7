/* ==================================================================================== */
/*  FICHIER          : dataManager.js                                                   */
/*  AUTEUR           : Trackozor                                                        */
/*  VERSION          : 1.2                                                              */
/*  DATE DE CR√âATION : 08/02/2025                                                       */
/*  DERNI√àRE MODIF.  : 09/02/2025                                                       */
/*  DESCRIPTION      : G√®re le chargement, la mise en cache et la recherche des recettes */
/*                     en utilisant un syst√®me de logs avanc√© et une gestion robuste des */
/*                     erreurs.                                                         */
/* ==================================================================================== */

import { logEvent } from "../utils/utils.js";

class DataManager {
    /**
     * Initialise la gestion des donn√©es avec une mise en cache.
     */
    constructor() {
        /** @type {Array<Object>|null} Stocke les recettes apr√®s chargement */
        this.cache = null;
    }

    /**
     * Charge les recettes depuis le fichier JSON et les stocke en cache.
     * @async
     * @returns {Promise<Array<Object>>} Un tableau d'objets contenant toutes les recettes.
     * @throws {Error} En cas d'√©chec du chargement des donn√©es.
     */
    async loadRecipes() {
        if (!this.cache) {
            try {
                logEvent("INFO", "üîÑ Chargement des recettes depuis le fichier JSON...");

                const response = await fetch("../data/recipes.json");
                if (!response.ok) throw new Error(`‚ùå Erreur HTTP : ${response.status}`);

                this.cache = await response.json();
                logEvent("SUCCESS", "‚úÖ Donn√©es charg√©es et stock√©es en cache.", { total: this.cache.length });

            } catch (error) {
                logEvent("ERROR", "üö® √âchec du chargement des recettes.", { error: error.message });
                throw error;
            }
        }
        return this.cache;
    }

    /**
     * R√©cup√®re toutes les recettes disponibles.
     * @async
     * @returns {Promise<Array<Object>>} Une liste compl√®te des recettes.
     */
    async getAllRecipes() {
        try {
            const recipes = await this.loadRecipes();
            logEvent("SUCCESS", "üìã R√©cup√©ration de toutes les recettes r√©ussie.", { total: recipes.length });
            return recipes;
        } catch (error) {
            logEvent("ERROR", "‚ùå Impossible de r√©cup√©rer les recettes.", { error: error.message });
            return [];
        }
    }

    /**
     * Recherche une recette par son identifiant.
     * @async
     * @param {number} id - Identifiant unique de la recette.
     * @returns {Promise<Object|null>} La recette trouv√©e ou `null` si non trouv√©e.
     */
    async getRecipeById(id) {
        try {
            const recipes = await this.loadRecipes();
            const recipe = recipes.find(recipe => recipe.id === id) || null;

            if (recipe) {
                logEvent("SUCCESS", `üîç Recette trouv√©e : ${recipe.name}`, { id });
            } else {
                logEvent("WARNING", "‚ö†Ô∏è Aucune recette trouv√©e avec cet ID.", { id });
            }
            return recipe;

        } catch (error) {
            logEvent("ERROR", `üö® Erreur lors de la r√©cup√©ration de la recette ID ${id}`, { error: error.message });
            return null;
        }
    }

    /**
     * Recherche des recettes contenant un mot-cl√©.
     * @async
     * @param {string} keyword - Mot-cl√© √† rechercher.
     * @returns {Promise<Array<Object>>} Liste des recettes correspondant au mot-cl√©.
     */
    async searchRecipes(keyword) {
        try {
            if (!keyword.trim()) {
                logEvent("INFO", "üîç Aucun mot-cl√© fourni, retour de toutes les recettes.");
                return this.getAllRecipes();
            }

            const recipes = await this.loadRecipes();
            const filteredRecipes = recipes.filter(recipe => this.filterRecipeByKeyword(keyword, recipe));

            logEvent("SUCCESS", `üîç Recherche termin√©e : ${filteredRecipes.length} recettes trouv√©es.`, { keyword });
            return filteredRecipes;

        } catch (error) {
            logEvent("ERROR", `‚ùå Erreur lors de la recherche de recettes pour '${keyword}'`, { error: error.message });
            return [];
        }
    }

    /**
     * V√©rifie si une recette contient le mot-cl√©.
     * @param {string} keyword - Mot-cl√© √† rechercher.
     * @param {Object} recipe - Objet repr√©sentant une recette.
     * @returns {boolean} `true` si la recette correspond, sinon `false`.
     */
    filterRecipeByKeyword(keyword, recipe) {
        const lowerKeyword = keyword.toLowerCase();
        return (
            recipe.name.toLowerCase().includes(lowerKeyword) ||
            recipe.ingredients.some(ing => ing.ingredient.toLowerCase().includes(lowerKeyword))
        );
    }
}

/* Exportation */
export const dataManager = new DataManager();
export const loadRecipes = () => dataManager.loadRecipes();
export const getAllRecipes = () => dataManager.getAllRecipes();
